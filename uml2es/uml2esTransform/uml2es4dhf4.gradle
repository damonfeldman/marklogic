/*
  Gradle tasks for UML2ES Toolkit. Use this in your project if you are working in the old DHF 4.N version (starting with 4.1 or higher)
  You can either:
  - copy bits and pieces of it into your own gradle build file
  - use this as the basis for your gradle build file; build on it
  - keep it as is and call it to run just the UML2ES tasks using gradle's -b flag; 
    you will also have another gradle build file with the rest of your tasks

  Tasks that begin with "_" are private. Don't call them; they are called internally.
  Tasks that begin with "u" are public. Call them!

  Feel free to edit the versions of plugins and classes to suit your needs
*/

buildscript {
  repositories {
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.4.6'

    // This gradle plugin extends the ml-gradle plugin with
    // commands that make the Data Hub Framework do its magic
    // You can change to any 4.x build. Must be 4.1.0 or higher. DHF 5 is not supported.
    id 'com.marklogic.ml-data-hub' version '4.1.0' 
}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}

    // Needed for mlcp dependencies
    maven { url "http://plugins.gradle.org/m2" }
    maven { url "http://developer.marklogic.com/maven2/" }

    // Needed for hadoop dependencies for mlcp
    maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
    // this allows you to write custom java code that depends
    // on the Data Hub Framework library
    // You can change to any 4.x build. Must be 4.1.0 or higher. DHF 5 is not supported.
    compile 'com.marklogic:marklogic-data-hub:4.1.0' 
    compile 'com.marklogic:marklogic-xcc:9.0.7'

    mlcp "com.marklogic:mlcp:9.0.6"
    mlcp "org.apache.commons:commons-csv:1.2"
    mlcp files("lib")
}

/*
 * PRIVATE TASKS: Model deployment
 */

task _mLoadXMI(type: com.marklogic.gradle.task.MlcpTask) {

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  def tparam = 'dummy' 
  if (project.findProperty("lax") != null && project.findProperty("lax") == "true") tparam = '{"lax": "true"}'

  def xfile = null;
  if (project.findProperty("modelFile") != null &&  !project.findProperty("modelFile").endsWith(".xlsx")) xfile = project.file(project.findProperty("modelFile"))
  enabled = xfile != null && xfile.exists()
  def unixDir = xfile == null ? null : xfile.getCanonicalFile().getParent().replace('\\', '/')
  def fullModelName = xfile == null ? null : xfile.getName()
  def regex = xfile == null ? null : '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "xml"
  input_file_path = unixDir + "/" + fullModelName
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/xmi/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = myHost
  port = myPort.toInteger()

  transform_module = "/xmi2es/xmi2esTransform.xqy"
  transform_namespace ="http://marklogic.com/xmi2es"
  transform_param = tparam
}

task _mLoadExcel(type: com.marklogic.gradle.task.MlcpTask) {

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  def tparam = 'dummy' 
  if (project.findProperty("lax") != null && project.findProperty("lax") == "true") tparam = '{"lax": "true"}'

  def xfile = null;
  if (project.findProperty("modelFile") != null &&  project.findProperty("modelFile").endsWith(".xlsx")) xfile = project.file(project.findProperty("modelFile"))
  enabled = xfile != null && xfile.exists()
  def unixDir = xfile == null ? null : xfile.getCanonicalFile().getParent().replace('\\', '/')
  def fullModelName = xfile == null ? null : xfile.getName()
  def regex = xfile == null ? null : '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "binary"
  input_file_path = unixDir + "/" + fullModelName
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/excel/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = myHost
  port = myPort.toInteger()

  transform_module = "/xmi2es/excel2uml.xqy"
  transform_namespace = "http://marklogic.com/xmi2es/xlsx"
  transform_param = tparam
}

task _mFetchDescriptors(type: com.marklogic.gradle.task.MlcpTask) {

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/entity-services-dump"
  collection_filter = "xmi2es"
  host = myHost
  port = myPort.toInteger()
}

task _mCopyGenCode(type: Copy) {
    from "data/entity-services-dump/xmi2es/gen"
    into "src/main/ml-modules/root/modelgen" 
}

task _mDeleteES(type: Delete) {
    delete "data/entity-services-dump"
}

task _mLoadExtendedModel(type: com.marklogic.gradle.task.MlcpTask) {
  def srcDir = new File("${projectDir}").getAbsolutePath() 
  def unixDir = srcDir.replace('\\', '/') + "/data/entity-services-dump/xmi2es/extension"
  def regex = '"' + unixDir + ",'',/,''" + '"'

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  def graphName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    graphName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = graphName != null

  classpath = configurations.mlcp
  command = "IMPORT"
  host = myHost
  port = myPort.toInteger()

  input_file_path = unixDir + "/" + graphName + ".ttl"
  input_file_type = "rdf" 
  output_uri_prefix = "/triplestore"
  output_graph = graphName
}

task _mRemoveOldExtendedModel(type: com.marklogic.gradle.task.ServerEvalTask) {

  def graphName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    graphName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = graphName != null

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const sem = require("/MarkLogic/semantics.xqy");\n'
js += 'sem.graphDelete(sem.iri("' + graphName + '"));\n'
  javascript = js;
}

task _mDeployFullModel(type: com.marklogic.gradle.task.ServerEvalTask) {

  def actualModelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    actualModelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = actualModelName != null

def js = "'use strict';\n"
js += 'declareUpdate();\n'
js += 'xdmp.documentInsert("/xmi2es/es/deployed/' + actualModelName + '.json",\n' 
js += '  cts.doc("/xmi2es/es/' + actualModelName + '.json"),\n'
js += '  {collections: ["http://marklogic.com/entity-services/models"]})'
  javascript = js;
}


task _mLoadMappingSpec(type: com.marklogic.gradle.task.MlcpTask) {

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  def xfile = null;
  if (project.findProperty("specFile") != null &&  project.findProperty("specFile").endsWith(".xlsx")) xfile = new File(project.findProperty("specFile"))
  enabled = xfile != null && xfile.exists()
  def unixDir = xfile == null ? null : xfile.getCanonicalFile().getParent().replace('\\', '/')
  def fullSpecName = xfile == null ? null : xfile.getName()
  def regex = xfile == null ? null : '"' + unixDir + ",'',/,''" + '"'

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "binary"
  input_file_path = unixDir + "/" + fullSpecName
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = "/xmi2es/excel-mapper/"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = "xmi2es"
  host = myHost
  port = myPort.toInteger()

  transform_module = "/xmi2es/excelMapper.xqy"
  transform_namespace = "http://marklogic.com/xmi2es/xlsx/mapper"
  transform_param = "dummy"
}

task _mDiscover(type: com.marklogic.gradle.task.ServerEvalTask) {
  def discover = project.findProperty("discover")

  def actualSpecName = null;
  if (project.findProperty("specFile") != null) {
    def fileNameProper = new File(project.findProperty("specFile")).getName()
    actualSpecName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = actualSpecName != null

  def mappingURI = '"/xmi2es/excel-mapper/' + actualSpecName + '.xlsx"'
  def discoveryDB = ""
  if (project.findProperty("mlStagingDbName") != null) discoveryDB = '"' + project.findProperty("mlStagingDbName") + '"'
  else discoveryDB = '"' + project.findProperty("mlAppName") + "-content"

  enabled = discover != null && discover == "true"

def js = "'use strict';\n"
js += 'const discover = require("/xmi2es/discovery.sjs");\n'
js += 'discover.discoverFromMapping(' + mappingURI + ',' +  discoveryDB + ');\n'
println js
  javascript = js;
}

/*
 * PRIVATE TASKS: Cookie cutter
 */

task _cDeleteCutDump(type: Delete) {
    delete "data/cookieCutter-dump"
}

task _cCutEntities(type: com.marklogic.gradle.task.ServerEvalTask) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null
  if (modelName != null) modelName = '"' + modelName + '"'

  def entities = project.findProperty("entities") 
  if (entities != null) entities = '"' + entities + '"'
  def entitySelect = project.findProperty("entitySelect") 
  if (entitySelect != null) entitySelect = '"' + entitySelect + '"'
  def stg = '"' + project.findProperty("mlStagingDbName") + '"';

def js = "'use strict';\n"
js += 'const cookie = require("/xmi2es/cookieCutter.sjs");\n'
js += 'cookie.createEntities(' + modelName + ',' + entitySelect + ',' + entities + ',' + stg + ');\n'
println js
  javascript = js;
}

task _cFetchEntities(type: com.marklogic.gradle.task.MlcpTask) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null

  def directoryFilter = "/cookieCutter/"  + modelName + "/plugins/entities/"

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = ""
  def myPort = project.findProperty("mlFinalPort")
  if (myPort == null) myPort = "0"

  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "plugins"
  output_file_path = "data/cookieCutter-dump"
  directory_filter = directoryFilter
  host = myHost
  port = myPort.toInteger()
}

task _cPromoteEntities(type: Copy) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null

    from "data/cookieCutter-dump/cookieCutter/" + modelName + "/plugins/entities"
    into "plugins/entities" 
}

task _cCutHarmonizeFlow(type: com.marklogic.gradle.task.ServerEvalTask) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null
  modelName = '"' + modelName + '"'

  def entityName = project.findProperty("entityName") 
  if (entityName != null) entityName = '"' + entityName + '"'
  def dataFormat = project.findProperty("dataFormat") 
  if (dataFormat != null) dataFormat = '"' + dataFormat + '"'
  def pluginFormat = project.findProperty("pluginFormat") 
  if (pluginFormat != null) pluginFormat = '"' + pluginFormat + '"'
  def flowName = project.findProperty("flowName") 
  if (flowName != null) flowName = '"' + flowName + '"'
  def contentMode = project.findProperty("contentMode") 
  if (contentMode != null) contentMode = '"' + contentMode + '"'
  def mappingSpec = project.findProperty("mappingSpec") 
  if (mappingSpec != null) mappingSpec = '"' + mappingSpec + '"'
  def stg = '"' + project.findProperty("mlStagingDbName") + '"';

def js = "'use strict';\n"
js += 'const cookie = require("/xmi2es/cookieCutter.sjs");\n'
js += 'cookie.createHarmonizeFlow(' + modelName + ',' + entityName + ',' + dataFormat + ',' + pluginFormat + ',' + flowName + ',' + contentMode + ',' + mappingSpec + ',' +  stg + ');\n'
println js
  javascript = js;
}


task _cFetchCutHarmonizeFlow(type: com.marklogic.gradle.task.MlcpTask) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null

  def directoryFilter = "/cookieCutter/"  + modelName + "/plugins/entities/" + project.findProperty("entityName") + "/harmonize/" + project.findProperty("flowName") + "/"
  directoryFilter += ",/dm/mapper/" + modelName + "/"

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = ""
  def myPort = project.findProperty("mlFinalPort")
  if (myPort == null) myPort = "0"

  classpath = configurations.mlcp
  command = "EXPORT"
  output_file_path = "data/cookieCutter-dump"
  directory_filter = directoryFilter
  host = myHost
  port = myPort.toInteger()
}

task _cPromoteCutHarmonizeFlow(type: Copy) {
  def modelName = null;
  if (project.findProperty("modelFile") != null) {
    def fileNameProper = new File(project.findProperty("modelFile")).getName()
    modelName = fileNameProper.substring(0, fileNameProper.indexOf(".")) 
  }
  enabled = modelName != null

    def harmPath = "plugins/entities/" + project.findProperty("entityName") + "/harmonize"
    def flowPath = harmPath + "/" + project.findProperty("flowName") 
    enabled = project.findProperty("overwrite") == "true" || !file(flowPath).exists()
    from "data/cookieCutter-dump/cookieCutter/" + modelName + "/" + flowPath  
    into flowPath 
}


/*
 * PUBLIC TASKS
 */

/*
uDeployModel : deploys your UML (or even Excel) model as an ES model
Input: 
- modelFile (Full or relative path of your XMI or Excel file.)
- lax: true/false. Default: false (Use lax mode when transforming from UML to ES.)
Dependencies: 
- Your UML/XMI or Excel model file exists at the location specified by modelFile
- Standard ml-gradle environment properties: mlAppServicesHost, mlAppServicesPort. OR ...
- Standard DHF environment properties: mlHost, mlFinalPort
Effects:
- Target database has the UML model, the ES model, the ES extensions, findings, generated code
- Target database has the ES model and its extended triples deployed
- Your gradle project has entity-services, entity-services-dump, entity-services-extension folders
- You will see generated code in src/main/ml-modules/root/modelgen
*/
task uDeployModel() {
  dependsOn '_mDeleteES'
  dependsOn '_mLoadXMI'
  dependsOn '_mLoadExcel'
  dependsOn '_mFetchDescriptors'
  dependsOn '_mCopyGenCode'
  dependsOn '_mRemoveOldExtendedModel'
  dependsOn '_mLoadExtendedModel'
  dependsOn '_mDeployFullModel' // I need it for cookie cutter
  tasks.findByName('_mLoadXMI').mustRunAfter '_mDeleteES'
  tasks.findByName('_mLoadExcel').mustRunAfter '_mDeleteES'
  tasks.findByName('_mFetchDescriptors').mustRunAfter '_mLoadXMI'
  tasks.findByName('_mFetchDescriptors').mustRunAfter '_mLoadExcel'
  tasks.findByName('_mCopyGenCode').mustRunAfter '_mFetchDescriptors'
  tasks.findByName('_mLoadExtendedModel').mustRunAfter '_mFetchDescriptors'
  tasks.findByName('_mLoadExtendedModel').mustRunAfter '_mRemoveOldExtendedModel'
  tasks.findByName('_mDeployFullModel').mustRunAfter '_mFetchDescriptors'
}

/*
uLoadMappingSpec : loads your Excel mapping spec for use in cookie cutter codegen
Input: 
- specFile = mandatory (Excel filename without suffix)
- discover = true/false; default false
- discoveryDB = default: content DB (non-DHF), staging DB (DHF0)
Dependencies: 
- Your gradle project has the folder data/mapping
- Your mapping spec is in that folder
- Standard ml-gradle environment properties: mlAppServicesHost, mlAppServicesPort. OR ...
- Standard DHF environment properties: mlHost, mlFinalPort
Effects:
- Target database has the mapping spec (original Excel plus transformed json)
*/
task uLoadMappingSpec() {
  dependsOn '_mLoadMappingSpec'
  dependsOn '_mDiscover'
  tasks.findByName('_mDiscover').mustRunAfter '_mLoadMappingSpec'
}

/*
uCreateDHFEntities - create DHF plugin entities; a souped-up hubCreateEntity
Input: 
- modelName - name of UML module file without .xml suffix
- entities (optional) - CSV of class names representing entities to create
- entitySelect (optional) - Possible values:
     "infer" - Have the cookie cutter infer which classes are entities. Ignore entities specified.
     "all" - All classes are considered entities. Ignore entities specified.
Dependencies: 
- Your gradle project is DHF 4.1
- You have deployed your UML model
- Standard DHF environment properties: mlHost, mlFinalPort
Effects:
- New plugins created under plugins/entities folder
*/
task uCreateDHFEntities() {
  dependsOn '_cDeleteCutDump'
  dependsOn '_cCutEntities'
  dependsOn '_cFetchEntities'
  dependsOn '_cPromoteEntities'
  tasks.findByName('_cFetchEntities').mustRunAfter '_cCutEntities'
  tasks.findByName('_cFetchEntities').mustRunAfter '_cDeleteCutDump'
  tasks.findByName('_cPromoteEntities').mustRunAfter '_cFetchEntities'
}

/*
uCreateDHFHarmonizeFlow - creates a harmonize flow for the specified entity. A souped-up hubCreateHarmonizeFlow
Input: 
- modelName - name of UML module file without .xml suffix
- entityName - name of the entity. You must already have created this using uCreateDHFEntities
- dataFormat: xml, json
- pluginFormat: xqy, sjs
- flowName: the harmonization flow name
- contentMode: possible values
     es - Entity Services mode. The cookie cutter generates ES-conversion style code and 
          incorporates hints from the data model and the mapping spec. This is like a souped up -useES option.
     dm - Declarative Mapper mode. This feature is not ready yet.
- mappingSpec: previously uploaded Excel mapping spec; refer to it by the Excel URI
- overwrite: true/false. If true and harmonization already exists, overwrite it. If you don't want to clobber, set to false.
Dependencies: 
- Your gradle project is DHF 4.1
- You have deployed your UML model
- You have created the entity in question using uCreateDHFEntities
- Standard DHF environment properties: mlHost, mlFinalPort
Effects:
- New harmonization flow plugins/entities/entityName/harmonize folder
*/
task uCreateDHFHarmonizeFlow() {
  dependsOn '_cDeleteCutDump'
  dependsOn '_cCutHarmonizeFlow'
  dependsOn '_cFetchCutHarmonizeFlow'
  dependsOn '_cPromoteCutHarmonizeFlow'
  tasks.findByName('_cFetchCutHarmonizeFlow').mustRunAfter '_cCutHarmonizeFlow'
  tasks.findByName('_cFetchCutHarmonizeFlow').mustRunAfter '_cDeleteCutDump'
  tasks.findByName('_cPromoteCutHarmonizeFlow').mustRunAfter '_cFetchCutHarmonizeFlow'
}

/*
uLoadDMTemplate : Loads DM template into FINAL DB.  You would have obtained the local copy from 
uCreateDHFHarmonizationFlow or uCreateConversionModule with contentMode=dm. Having made your tweaks to that template,
you now ingest it back to MarkLogic. This task ensures the template has the right URI and collections.

Example:
  /dm/mapper/EmployeeHubModel/Employee/harmonizeGlobalDM.json
  dm, cookieCutter, http://marklogic.com/entity-services/models, EmployeeHubModel

Input: 
- dmPath - mandatory
Dependencies: 
- dmPth contains file dm/mapper/<ModelName>/<EntityName>/<harmonizationName>.json
- Standard ml-gradle environment properties: mlAppServicesHost, mlAppServicesPort. OR ...
- Standard DHF environment properties: mlHost, mlFinalPort
Effects:
- Target database has your template
*/
task uLoadDMTemplate(type: com.marklogic.gradle.task.MlcpTask) {


  def srcDir = new File("${projectDir}").getAbsolutePath()
  def unixDir = srcDir.replace('\\', '/') + "/"  + project.findProperty("dmPath")
  def regex = '"' + unixDir + ",''" + '"'

  def myHost = project.findProperty("mlHost")
  if (myHost == null) myHost = project.findProperty("mlAppServicesHost")
  def myPort = project.findProperty("mlAppServicesPort")
  if (myPort == null) myPort = project.findProperty("mlRestPort")
  if (myPort == null) myPort = project.findProperty("mlFinalPort")

  // check the pathness and extract the modelName
  def pathDir = unixDir  + "/dm/mapper"
  def dmModelName = null
  def pathFiles = file(pathDir).list()
  if (pathFiles != null && pathFiles.size() == 1) {
    dmModelName = pathFiles[0];
  }
  enabled = project.findProperty("dmPath") != null && dmModelName != null

  def collections = "dm,cookieCutter,http://marklogic.com/entity-services/models," + dmModelName

  classpath = configurations.mlcp
  command = "IMPORT"
  document_type = "json"
  input_file_path = unixDir + "/dm/mapper/*/*/*.json"
  input_file_type = "documents"
  output_uri_replace = regex
  output_uri_prefix = ""
  output_permissions = "rest-reader,read,rest-writer,update"
  output_collections = collections
  host = myHost
  port = myPort.toInteger()
}

