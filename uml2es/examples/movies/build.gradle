
buildscript {

  repositories {
    jcenter{url "https://jcenter.bintray.com/"}
    mavenLocal()
    maven { url "https://plugins.gradle.org/m2" }
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:4.0.1"
    classpath "net.saliman:gradle-properties-plugin:1.4.6"
  }
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
  jcenter{url "https://jcenter.bintray.com/"}

  // Needed for mlcp dependencies
  maven { url "https://plugins.gradle.org/m2" }
  maven { url "https://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.10"
  mlcp "org.apache.commons:commons-csv:1.2"
  mlcp files("lib")
}

task includeXMI2ESTransform(type: Copy) {
    from "../../uml2esTransform/src/main/ml-modules/root/xmi2es"
    into "src/main/ml-modules/root/xmi2es"
}

task includeUGradle() {
  // Don't use Copy task bcuz file locking into gradle project dir on Windows
  doLast {
    copy {
      from "../../uml2esTransform/uml2es.gradle"
      into "."
    }
  }
}

task setup() {
  dependsOn('includeXMI2ESTransform')
  dependsOn('includeUGradle')
}

task ingestMovieData
  ["role", "bio", "movieDoc", "company","person", "movie"].toList().each { entityType ->
  task "ingestEntity${entityType}"(type: com.marklogic.gradle.task.MlcpTask) {  
    def dataDir = "${projectDir}";
    def unixDir = dataDir.replace('\\', '/');
    def regexDir = unixDir+"/data/movie/${entityType}"
    def regex = '"' + regexDir + ",'',/,'',.json,''" + '"'

    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    document_type = "xml"
    input_file_path = "data/movie/${entityType}"
    input_file_type = "documents"
    output_uri_replace = regex
    output_uri_prefix = "/xmi2es/imdb/${entityType}/"
    output_uri_suffix = ".xml"
    output_collections = "xmi2es,imdb,${entityType}"
    output_permissions = "rest-reader,read,rest-writer,update"
    host = mlAppServicesHost
    port = mlAppServicesPort.toInteger()
    transform_module = "/xmi2es/loadMovieTransformation.xqy"
    transform_namespace ="http://marklogic.com/xmi2es/movie"
    transform_param = "${entityType}"
  } 

   ingestMovieData.dependsOn "ingestEntity${entityType}"
}

tasks.findByName('ingestEntitymovie').mustRunAfter 'ingestEntityrole'
tasks.findByName('ingestEntityperson').mustRunAfter 'ingestEntityrole'
tasks.findByName('ingestEntitycompany').mustRunAfter 'ingestEntityrole'

/*
And now a few tasks to manage generated vs real:
src/main/ml-schemas/MovieModel-0.0.1.tdex is a tweaked TDE template. 
src/main/ml-schemas/tde/MovieModel-0.0.1.tdex is generated; we don't want to use it
src/main/ml-schemas/tde/MovieModel-0.0.1-GENERATED.tdex is generated; we don't want to use it
src/main/ml-schemas/MovieModel-0.0.1-GENERATED.tdex is generated; we don't want to use it

src/main/ml-config/databases/initial/content-database-INITIAL.json is the starting-point DB with no indexes based on model
src/main/ml-config/databases/content-database-GENERATED.json is generated by ES; we want to use it once ES has run
src/main/ml-config/databases/content-database.json is equal to either INITIAL or GENERATED
 */


task useInitialDBConfig(type: Copy) {
    from "data/setupdata/content-database-INITIAL.json"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('-INITIAL', '')
    }
}

task useGeneratedDBConfig(type: Copy) {
    from "src/main/ml-config/databases/content-database.json.GENERATED"
    into "src/main/ml-config/databases"
    rename { String fileName ->
        fileName.replace('.GENERATED', '')
    }
}

task deleteGenerated(type: Delete) {
  delete "src/main/ml-schemas/tde/MovieModel-0.0.1.tdex"
  delete "src/main/ml-schemas/tde/MovieModel-0.0.1-GENERATED.tdex"
  delete "src/main/ml-schemas/MovieModel-0.0.1-GENERATED.tdex"
  delete "src/main/ml-config/databases/content-database.json.GENERATED"
  delete "src/main/ml-modules/ext/entity-services/MovieModel-0.0.1.xqy.GENERATED"
  delete "src/main/ml-modules/options/MovieModel.xml"
}




